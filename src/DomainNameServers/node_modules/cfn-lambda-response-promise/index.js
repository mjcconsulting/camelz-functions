/* Copyright 2015 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
   This file is licensed to you under the AWS Customer Agreement (the "License").
   You may not use this file except in compliance with the License.
   A copy of the License is located at http://aws.amazon.com/agreement/.
   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied.
   See the License for the specific language governing permissions and limitations under the License. */

exports.SUCCESS = "SUCCESS";
exports.FAILED = "FAILED";

exports.send = function(event, context, responseStatus, responseData, physicalResourceId) {
  return new Promise((resolve, reject) => {
    const responseBody = JSON.stringify({
      Status: responseStatus,
      Reason: `See the details in CloudWatch Log Stream: ${context.logStreamName}`,
      PhysicalResourceId: physicalResourceId || context.logStreamName,
      StackId: event.StackId,
      RequestId: event.RequestId,
      LogicalResourceId: event.LogicalResourceId,
      Data: responseData
    });

    console.info(`Response body:\n${responseBody}`);

    const srcAccountId = event.ServiceToken.split(':')[4];
    const dstAccountId = event.ResourceProperties.AccountId;

    // This function can be called direct by CloudFormation within the same Account,
    // Or via a Proxy Lambda Function in another Account, for Multi-Account integration
    if (! dstAccountId || dstAccountId == srcAccountId) {
      console.info(`Invoked by current Account: Responding to CloudFormation`);

      const https = require('https');
      const url = require('url');

      const parsedUrl = url.parse(event.ResponseURL);
      const options = {
        hostname: parsedUrl.hostname,
        port: 443,
        path: parsedUrl.path,
        method: "PUT",
        headers: {
          "content-type": "",
          "content-length": responseBody.length
        }
      };

      const request = https.request(options, (response) => {
        console.info(`Status code: ${response.statusCode}`);
        console.info(`Status message: ${response.statusMessage}`);
        resolve(context.done());
      });

      request.on('error', (error) => {
        console.info(`send(..) failed executing https.request(..): ${error}`);
        reject(context.done(error));
      });

      request.write(responseBody);
      request.end();
    }
    else {
      console.info(`Invoked by Account ${srcAccountId}: Responding to Lambda`);
      resolve(context.done(responseBody));
    }
  });
};
